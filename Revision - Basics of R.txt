##Revision for rote 1

Basics of R.

####Working Directory 

1.) To set the working directory to a specified path - Use setwd() Ex - setwd('C:/Users/vinay/OneDrive/Desktop/Insofe')
    **Note Replace '\' with '/' for windows as R does not recognise '\'
2.) To know which directory that we are currently working in - Use getwd() Ex - getwd()


###Using R as a calculator

1.) Addition - x+y
2.) Subtraction - x-y
3.) Multiplication - x*y
4.) Division - x/y
5.) Modulo - x%%y This gives the remainder when x is divided by y
6.) Integer Division - x/%/y This gives the whole number when x is divided by y
7.) Power - x**2 or x^2 

###Excercise

# 1. Choose any number between 2 - 10
# 2. Multiply the given number by 2
# 3. Add 5 to the answer
# 4. Multiply the number by 50
# 5. If you have already celebrated birthday this year add 1769 elseadd 1768
# 6. Subtract the year you were born in 

Ans.)  (((((3*2)+5)*50)+1769)-1994)

# 2a. Variable assignment - Example ====
# You can use any of the following ways to assign a variable in R
# '<-', '->', '='

# General convention is using '<-' - Ex - a <- 2 or 2 <- a or a = 2
# Observe that the variable can now be found in the environment

# 2b. Variable assignment - Activity ====

# 1. Think of a number and assign it in a variable
# 2. Multiply the variable by 3
# 3. Add 6 to it
# 4. Divide it by 3
# 4. Subtract number from step-1 from output of step 4

Ans.)
var <- 2
var1 <- var + 2
var2 <- var1 + 6
var3 <- var2 / 3
var4 <- var3 - var
((((var*3)+6)/3)-var)

# 3a. Atomic / Primary data types - Example ====
# R has the following data types
# 1. Numeric / Integer
# 2. Character
# 3. Logical

# Integer or numeric
class(1)
# Character- always in quotes (single or double)
class('hello')
# Logical
class(T)

# 3b. Atomic / Primary data types - Activity ====

# 1. What is the class of a variable 'pct' that has a value '100' in it?
# 2. What is the class of a variable 'miss' that has a value T in it?
# 3. What is the class of a variable 'days' that has a value 20 in it?

Ans.)
pct <- 100
class(pct)

miss <- T
class(miss)

days <- 20
class(days) 

# 4a. Relational operators - Example ====
#Following are the realational operators that are available in R
# == checking for equality
# >= greater than or equal to
# <= less than or equal to
# < less than
# > greater than
# != not equal to

# Note: The output these operators is Logical i.e. whether the relation is True or False

'Wealth' == 'Happiness'

hours_spent_ofc = 9*5
hours_spent_family = 3*7 
hours_spent_family >= hours_spent_ofc

time_spent_personal = 2
time_spent_travel = 3
time_spent_personal <= time_spent_travel

years_gone_by = 25
active_life = 75
bal_time = active_life - years_gone_by
years_gone_by < active_life

amt_spent_primary_education = 12 
amt_spent_graduation = 4
amt_spent_graduation < amt_spent_primary_education

# 4b. Relational operators - Activity ====

# 1. Create a variable srh with value 6 in it
# 2. Create a variable csk with value 8 in it
# 3. Check if the difference between the variables is equal to 0
# 4. Check if csk is greater than srh
# 5. Add 3 to srh and check if it is less than csk
# 6. Add 2 to csk and 3 to srh and check if csk is greater than or equal to srh

Ans.)
srh <- 6
csk <- 8
srh - csk==0
csk > srh
srh+3 < csk
csk+2 >= srh + 3


# 5a. Logical operators - Example ====
# "|" or "||" is "OR" operator "|" is vectorised while "||" is not
# "&" or "&&" is "AND" operator "&" is vectorised while "&&" is not
# "!" is NOT operator


# 5b. Logical operators - Activity ====

# 1. Create a variable b1 with a value F in it
# 2. Create a variable b2 with a value T in it
# 3. Use or operator between not of b1 , b2
# 4. Use and operator between not of b1 and not of b2
# 5. Use and operator between b1 and b2

var1 <- F
var2 <- T

!var1|var2
!(var1&var2)
var1 & var2

# 6b. Complex constructs using logical and relational operators - Activity ====

# 1. From the above example check the following two conditions using or operator
#     a. Add 3 to srh and check if it is greater than (csk+1)
#     b. Add 2 to srh and check if it is greater than (csk+1)

(srh+3 > csk+1) | (srh+2 > csk+1)

# Secondary datatypes (Data Structures) in R ====

# Vectors: A vector is an object that consists of elements of same data type.
#          Lets see how to create a vector using a c function. c is a generic 
#          function that combines all its arguments.

# Matrices: These are arrays of two dimensions or more but we focus on 2d.
#           The data type for each of these elements should be same as in the 
#           case of vectors.

# Data Frames: Data in the form of a matrix (rows and columns).
#              The columns can be of different data types and type coersion 
#              doesn't happen.
#              This is important because the data we work on contain several 
#              attributes of different data types and it is  essential to preserve them.

# 7a. Vectors - Creation and subset - Example ====

#Creating a numeric vector, identify the class
** c is a function called combine
vec <- c(1,2,3,4,5)
class(vec) - numeric


#Creating a character vector
vec2 <- c('a','b','c') 
class(vec2) - character

#Creating a logical vector
vec3 <- c('T','F','T')
class(vec3) - logical

# If we want to create numbers in sequence we can use a ":" operator
##To generate a sequence of numbers between 1 - 100
1:100

# A refined way to generating sequences
#seq is a function that takes parameters from, to, and by
seq(1,100,by=1)

# Extracting elements from a vector - By using []
vec3[1]


#To find the 3rd element of a vector
#To find the 1st 4 elements of a vector
a=c(1,2,3,4)
a[3]
a[1:4]


# 7b. Vectors - Creation and subset - Activity ====

# 1. Create a vector x1 with values (10, 'i', 24) & check the class of x1
# 2. Create a vector x2 with values ('i', 'j', TRUE) & check the class of x2
# 3. Create a vector x3 with values (TRUE, FALSE, 10, 11) & check the class of x3
# 4. Create a vector x4 with values ('i', 10, TRUE, 'False') & check the class of x4
# 5. Get the 2nd element of vector x1
# 6. Get the 2nd and 4th elements of vector x3
# 7. Get 1st to 3rd elements of vector x4

Ans.)
x1 <- c(10,'i',24)
x2 <- c('i','j',TRUE)
x3 <- c(TRUE,FALSE,10,11)
x4 <- c('i',10,TRUE,'FALSE')
x1[2]
x3[c(2,4)]
x4[1:3]

# 8a. Vectors - Applying logical and relational operators - Example ====

 #Get elements divisible by 2
 #Get elements divisible by 2 or 3
 #Get elements divisible by 5 and 3

 vec4 <- c(1,2,3,4,5,6)
 vec4[vec4%%2=0]
 vec4[(vec4%%2=0)|(vec4%%3=0)]
 vec4[(vec4%%5=0)&(vec4%%3=0)]

 # 8b. Vectors - Applying logical and relational operators - Activity ====

# 1. Create a vector srh with the elements ('L','L','W','W','W','L','W','W')
# 2. Find how many elements are there in srh and also number of 'W's
# 3. Create a vector csk with elements ('W','W','L','L','W','W','L','W')
# 4. Get the index numbers where srh and csk have 'W's and find how many are they

srh <- c('L','L','W','W','W','L','W','W')
length(srh)
length(srh[srh=='W])
csk <- c('W','W','L','L','W','W','L','W')
which(csk=='W'& srh=='W')
length(which(csk=='W'& srh=='W'))

# 9a. Vectors - Operations - Example ====

# 9b. Vectors - Operations - Activity ====

# 1. Create a vector x1 with sequence of numbers from 10 to 100 with step size 3
# 2. Create a vecor x2 with random numbers between 10 to 100 and the number of 
#    elements should be number of elements in x1
# 3. Add the elements of x1 and x2 and get the elements of x1 and x2 that are 
#    divisible by 5

x1 <- seq(10,100,by=3)
x2 <- sample(seq(10,100),size=length(x1))
x3 <- x1 + x2
x3[x3%%5==0]


# Note: To generate random numbers use sample('range','number_of_samples') function

# 10a. Matrices - Creation and subset - Example ====

# Matrix is a function to create a matrix. It has the following arguments - 
# what are the elements in the matrix
# how many rows in matrix / how many columns
# how should the filling of elements is done

mat <- matrix(1:6,nrow=3,byrow=T)
nrow(mat)

